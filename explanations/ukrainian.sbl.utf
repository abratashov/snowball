stringescapes {}

/* the 33 Ukrainian letters and apostrophe represented by single quote */

stringdef a    '{U+0430}'
stringdef b    '{U+0431}'
stringdef v    '{U+0432}'
stringdef gh   '{U+0433}'
stringdef g    '{U+0491}'
stringdef d    '{U+0434}'
stringdef e    '{U+0435}'
stringdef ye   '{U+0454}'
stringdef zh   '{U+0436}'
stringdef z    '{U+0437}'
stringdef y    '{U+0438}'
stringdef i    '{U+0456}'
stringdef yi   '{U+0457}'
stringdef i`   '{U+0439}'
stringdef k    '{U+043A}'
stringdef l    '{U+043B}'
stringdef m    '{U+043C}'
stringdef n    '{U+043D}'
stringdef o    '{U+043E}'
stringdef p    '{U+043F}'
stringdef r    '{U+0440}'
stringdef s    '{U+0441}'
stringdef t    '{U+0442}'
stringdef u    '{U+0443}'
stringdef f    '{U+0444}'
stringdef kh   '{U+0445}'
stringdef ts   '{U+0446}'
stringdef ch   '{U+0447}'
stringdef sh   '{U+0448}'
stringdef shch '{U+0449}'
stringdef soft '{U+044C}'
stringdef iu   '{U+044E}'
stringdef ia   '{U+044F}'

// Apostrophe-like symbols
// stringdef a_apostrophe      '{U+0027}' // '
// stringdef a_grave_accent   U+0060   // ` cannot to remove system char in Snowball
stringdef a_ml_prime        '{U+02B9}' // ʹ
stringdef a_mlt_comma       '{U+02BB}' // ʻ
stringdef a_ml_apostrophe   '{U+02BC}' // ʼ
stringdef a_mlr_comma       '{U+02BD}' // ʽ
stringdef a_mlv_line        '{U+02C8}' // ˈ
stringdef a_lsq_mark        '{U+2018}' // ‘
stringdef a_rsq_mark        '{U+2019}' // ’
stringdef a_shr9q_mark      '{U+201B}' // ‛
stringdef a_prime           '{U+2032}' // ′

routines (
  prelude
  mark_regions R1 R2
  perfective_gerund
  adjective
  adjectival
  reflexive
  verb
  noun
  common_avn
  derivational
  // tidy_up
)

externals ( stem )

integers ( pV p1 p2 )

groupings ( v )

define v 'аеєиіїоуюя'

define prelude as (
  do repeat ( goto (['ґ']) <- 'г' )

  // Remove any apostrophe-like symbols
  do repeat ( goto (['{'}']) delete )
  do repeat ( goto (['ʹ']) delete )
  do repeat ( goto (['ʻ']) delete )
  do repeat ( goto (['ʼ']) delete )
  do repeat ( goto (['ʽ']) delete )
  do repeat ( goto (['ˈ']) delete )
  do repeat ( goto (['‘']) delete )
  do repeat ( goto (['’']) delete )
  do repeat ( goto (['‛']) delete )
  do repeat ( goto (['′']) delete )
)

define mark_regions as (
  $pV = limit
  $p1 = limit
  $p2 = limit
  do (
    gopast v  setmark pV  gopast non-v setmark p1
    gopast v  gopast non-v  setmark p2
  )
)

backwardmode (
  define R1 as $p1 <= cursor
  define R2 as $p2 <= cursor

  define perfective_gerund as (
    [substring] among (
      'в'      // донаписа|в    дороби|в дороби|в
      'вши'    // написа|вши    зроби|вши
      'вшись'  // оберіга|вшись спакува|вшись
      'вшися'  // оберіга|вшися сподіва|вшися
               // ('а' or 'я' delete) ???
      'учи'    // пиш|учи       рев|учи
      'ючи'    // ся|ючи        підпису|ючи
      'ючись'  // змага|ючись
      'ючися'  // навча|ючися
      'ачи'    // бач|ачи
      'ачись'  // бач|ачись
      'ачися'  // бач|ачися
      'лячи'   // роб|лячи      люб|лячи
      'лячись' // бав|лячись
      'лячися' // бав|лячися
      'ячи'    // сид|ячи       вовтуз|ячи
      'ячись'  // ???
      'ячися'  // ???
        (delete)
   )
  )

  define adjective as (
    [substring] among (
      'ий' 'ого' 'ому' 'им' 'ім'
      'іший' 'ішого' 'ішому' 'ішим' 'ішім' 'іше'
      'ої' 'ій' 'ою'
      'іша' 'ішої' 'ішій' 'ішу' 'ішою'
      'их' 'ими'
      'іші' 'іших' 'ішими'
      'ього' 'ьому'
      'ьої' 'ьою'
      'іх' 'іми'

      'яча' 'яче' 'ячу' 'ячі'
      'ача' 'аче' 'ачу' 'ачі'
      'юча' 'юче' 'ючу' 'ючі'
      'уча' 'уче' 'учу' 'учі'
        (delete)
    )
  )

  define adjectival as (
    adjective

    try (
      [substring] among (
        'яч'
        'ач'
        'юч'
        'уч'
          (delete)

        // Need or needn't ?
        // 'ен' // втрач|ений  втрач|еного   втрач|еному   втрач|еним    втрач|енім
                // втрач|ена   втрач|ене     втрач|еної    втрач|еній    втрач|ену   втрач|еною
                // втрач|ені   втрач|ених    втрач|еними
      )
    )
  )

  define reflexive as (
    [substring] among (
      'ся'    // осік|ся
      'сь'    // недонавчи|сь
      'ється' // смі|ється
      'еться' // спиш|еться
        (delete)
    )
  )

  define verb as (
    [substring] among (
      'ти'
      // 'ть'  // роби|ть ???
      'іть'
      'те'

      'йте'
      'ла' 'ло' 'ли'
      'єш' 'ємо' 'єте' 'ють'
      'еш' 'емо' 'ете' 'уть'
      'лю' 'иш' 'ить' 'имо' 'ите' 'лять'
      'їш' 'їть' 'їмо' 'їте' 'ять'
      'ать'
        (delete)
    )
  )

  define noun as (
    [substring] among (
      'ам' 'ами' 'ах'
      'ею'
      'ям' 'ями' 'ях'
      'ові' 'ом'
      'ець' 'ем'
      'ень'
      'ой'
      'ію' 'ії'
        (delete)
    )
  )

  define common_avn as (
    [substring] among (
      // adj
      // зелен|а  зелен|е   зелен|і   зелен|у  верхн|ю  верхн|я

      // verb
      // писа|в   пиш|е     чита|є    чита|й   пиш|у    чита|ю

      // noun
      // вод|а    пісн|е    вод|и     вод|і    сара|й
      // вод|о    вод|у     совіст|ь  пісн|ю   пісн|я
      // ген|ій   вод|ою

      'а' 'в' 'е' 'є' 'и' 'і'
      'й' 'о' 'у' 'ь' 'ю' 'я'
      'ій' 'ою'
        (delete)
    )
  )

  define derivational as (
    [substring] R2 among (
      'іст'  // безтурботн|іст.ю
      'ост'  // безтурботн|ост.і
        (delete)
    )
  )

  // define tidy_up as (
  //     [substring] among (
  //         // 'ейш'
  //         // 'ейше'  // superlative forms
  //         //    (delete
  //         //     ['н'] 'н' delete
  //         //    )
  //         // 'н'
  //         //    ('н' delete) // e.g. -nno endings
  //         // '{'}'
  //         //    (delete)  // with some slight false conflations
  //     )
  // )
)

define stem as (
  // Normalise {e"} to е.  The documentation has long suggested the user
  // should do this before calling the stemmer - we now do it for them.
  // do repeat ( goto (['{e"}']) <- 'е' )

  do prelude
  do mark_regions

  backwards setlimit tomark pV for (
    do (
      perfective_gerund or
      (
        try reflexive

        adjectival or verb or noun or common_avn
      )
    )

    do derivational
    // do tidy_up
  )
)


